{
	"info": {
		"_postman_id": "69ebdc5f-f296-47b5-ab57-6fc9e7ac9876",
		"name": "LOG service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20715837"
	},
	"item": [
		{
			"name": "Get log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"ID is not empty\", function () {\r",
							"    pm.expect(response[0].id).to.not.be.empty\r",
							"});\r",
							"pm.test(\"Username is not empty\", function () {\r",
							"    pm.expect(response[0].user).to.not.be.empty\r",
							"});\r",
							"pm.test(\"Action response is a string\", function () {\r",
							"    pm.expect(response[0].action).to.be.a('string');\r",
							"});\r",
							"moment = require('moment');\r",
							"pm.test(\"Date is present in YYYY-MM-DDTHH:mm:ss:sssZ format\", function () {\r",
							"    pm.expect(moment(response[0].timestamp, 'YYYY-MM-DDTHH:mm:ss:sssZ').isValid()).is.true;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"1stuser\", response[0].user);\r",
							"pm.collectionVariables.set(\"1stuserID\", response[0].id);\r",
							"\r",
							"\r",
							"\r",
							"//console.log(pm.variables.get(\"1stuserID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get log Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"ID is not empty\", function () {\r",
							"    pm.expect(response[0].id).to.not.be.empty\r",
							"});\r",
							"pm.test(\"Username is not empty\", function () {\r",
							"    pm.expect(response[0].user).to.not.be.empty\r",
							"});\r",
							"pm.test(\"Action response is a string\", function () {\r",
							"    pm.expect(response[0].action).to.be.a('string');\r",
							"});\r",
							"moment = require('moment');\r",
							"pm.test(\"Date is present in YYYY-MM-DDTHH:mm:ss:sssZ format\", function () {\r",
							"    pm.expect(moment(response[0].timestamp, 'YYYY-MM-DDTHH:mm:ss:sssZ').isValid()).is.true;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"1stuser\", response[0].user);\r",
							"pm.collectionVariables.set(\"1stuserID\", response[0].id);\r",
							"\r",
							"\r",
							"\r",
							"//console.log(pm.variables.get(\"1stuserID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get log per user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.expect(response).to.be.an('object')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log/user/{{1stuser}}",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log",
						"user",
						"{{1stuser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get log per user ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.expect(response).to.be.an('object')\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log/{{1stuserID}}",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log",
						"{{1stuserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response typeOf check\", function () {\r",
							"    pm.expect(response).to.be.an('object')\r",
							"});\r",
							"pm.test(\"Action value check\", function () {\r",
							"    pm.expect(response.action).to.be.equal('xD')\r",
							"});\r",
							"pm.test(\"User value check\", function () {\r",
							"    pm.expect(response.user).to.be.equal(pm.variables.get(\"losuser\"))\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let user = pm.variables.replaceIn('{{$randomUserName}}');\r",
							"pm.collectionVariables.set(\"losuser\", user);;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user\": \"{{losuser}}\",\r\n\"action\":  \"xD\"\r\n}"
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response typeOf check\", function () {\r",
							"    pm.expect(response).to.be.an('object')\r",
							"});\r",
							"pm.test(\"Action value check\", function () {\r",
							"    pm.expect(response.action).to.be.equal('xD')\r",
							"});\r",
							"pm.test(\"User value check\", function () {\r",
							"    pm.expect(response.user).to.be.equal(pm.variables.get(\"losuser\"))\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mixed",
						"value": "true",
						"disabled": true
					},
					{
						"key": "Store",
						"value": "{{store}}",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{auth}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"offset\":\"2\",\r\n\"limit\": \"2\"  }"
				},
				"url": {
					"raw": "https://noid.{{cph_url}}/logs/log/search",
					"protocol": "https",
					"host": [
						"noid",
						"product",
						subproduct
					],
					"path": [
						"logs",
						"log",
						"search"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "1stuserID",
			"value": ""
		},
		{
			"key": "1stuser",
			"value": ""
		},
		{
			"key": "randuser",
			"value": ""
		},
		{
			"key": "losuser",
			"value": ""
		},
		{
			"key": "cph_url",
			"value": ""
		},
		{
			"key": "env_cph",
			"value": ""
		},
		{
			"key": "auth",
			"value": ""
		}
	]
}
